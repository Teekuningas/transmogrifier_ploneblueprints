[transmogrifier]
title = Plone Sections
description = Defines all generic Plone pipeline sections (and no pipeline)

[plone.export.content.search]
blueprint = transmogrifier.from
condition = path:item/_brain/_unrestrictedGetObject|nothing
_brain = path:context/portal_catalog/unrestrictedSearchResults

[plone.export.content.get_path]
blueprint = transmogrifier.set
_path = path:item/_brain/getPath

[plone.export.content.filter]
blueprint = transmogrifier.filter.or
is_below = python:item.get('_path').startswith('${transmogrifier:prefix}/')
is_exact = python:item.get('_path') == '${transmogrifier:prefix}'

[plone.export.content.behead]
blueprint = transmogrifier.set
_path = python:item.get('_path')[len('${transmogrifier:prefix}'):]

[plone.export.content.get_type]
blueprint = transmogrifier.set
_type = path:item/_brain/portal_type

[plone.export.content.get_object]
blueprint = transmogrifier.set
_object = path:item/_brain/_unrestrictedGetObject

[plone.export.content.get_uuid]
blueprint = transmogrifier.set
_uuid = path:item/_brain/UID

[plone.export.content.set_rfc822]
blueprint = plone.rfc822.marshall
key = _rfc822

[plone.export.content.set_rfc822_params]
blueprint = transmogrifier.transform
set_path = python:item['_rfc822'].set_param('path', item['_path'])
set_type = python:item['_rfc822'].set_param('type', item['_type'])
set_uuid = python:item['_rfc822'].set_param('uuid', item['_uuid'])

[plone.export.content.get_rfc822]
blueprint = transmogrifier.set
_path = python:item['_rfc822'].get_param('path')
_type = python:item['_rfc822'].get_param('type')
_uuid = python:item['_rfc822'].get_param('uuid')

[plone.export.content.get_dates]
blueprint = transmogrifier.set
creation_date = path:item/_object/creation_date
modification_date = path:item/_object/modification_date

[plone.export.content.get_properties]
blueprint = plone.properties.get

[plone.export.content.get_workflow_history]
blueprint = transmogrifier.set
_workflow_history = path:item/_object/workflow_history

[plone.export.content.get_local_roles]
blueprint = plone.local_roles.get

[plone.export.content.send_rfc822]
blueprint = rabbitpy.producer
routing-key = plone.export.content.rfc822
queue = plone.export.content.rfc822
queue-auto-declare = True
queue-auto-delete = False
key = _rfc822

[plone.export.content.send_state]
blueprint = rabbitpy.producer
routing-key = plone.export.content.state
queue = plone.export.structure.state
queue-auto-declare = True
queue-auto-delete = False
serializer = pickle
keys =
    _path
    _type
    _properties
    _local_roles
    _block_inherit
    _workflow_history
    creation_date
    modification_date
