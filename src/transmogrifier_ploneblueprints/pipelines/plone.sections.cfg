[transmogrifier]
title = Plone Sections
description = Defines all generic Plone pipeline sections (and no pipeline)
prefix =
content-types =
    Document
    Event
    File
    Folder
    Image
    Link
    News Item
#   Topic

[plone.export.content.search]
blueprint = transmogrifier.from
condition = path:item/_brain/_unrestrictedGetObject|nothing
# _brain = path:context/portal_catalog/unrestrictedSearchResults

## XXX: GopIpIndex fails, because conversation does not have REQUEST
_brain = python:context.portal_catalog.unrestrictedSearchResults(sort_on='getObjPositionInParent')

[plone.export.content.get_path]
blueprint = transmogrifier.set
_path = path:item/_brain/getPath

[plone.export.content.filter]
blueprint = transmogrifier.filter.or
is_below = python:item.get('_path').startswith('${transmogrifier:prefix}/')
is_exact = python:item.get('_path') == '${transmogrifier:prefix}'

[plone.export.content.behead]
blueprint = transmogrifier.set
_path = python:item.get('_path')[len('${transmogrifier:prefix}'):]

[plone.export.groups.get_groups]
blueprint = plone.groups.get

[plone.export.content.get_type]
blueprint = transmogrifier.set
_type = path:item/_brain/portal_type

[plone.export.content.get_object]
blueprint = transmogrifier.set
_object = path:item/_brain/_unrestrictedGetObject

[plone.export.content.get_uuid]
blueprint = transmogrifier.set
_uuid = path:item/_brain/UID

[plone.export.content.get_rfc822]
blueprint = plone.rfc822.marshall
key = _rfc822

[plone.export.content.get_rfc822_params]
blueprint = transmogrifier.transform
set_path = python:item['_rfc822'].set_param('path', item['_path'])
set_type = python:item['_rfc822'].set_param('type', item['_type'])
set_uuid = python:item['_rfc822'].set_param('uuid', item['_uuid'])

[plone.export.content.get_dates]
blueprint = transmogrifier.set
creation_date = path:item/_object/creation_date
modification_date = path:item/_object/modification_date

[plone.export.content.get_properties]
blueprint = plone.properties.get

[plone.export.content.get_workflow_history]
blueprint = transmogrifier.set
_workflow_history = path:item/_object/workflow_history

[plone.export.content.get_placeful_workflow]
blueprint = plone.placeful_workflow.get

[plone.export.content.get_local_roles]
blueprint = plone.local_roles.get

[plone.export.groups.send_groups]
blueprint = rabbitpy.producer
routing-key = plone.export.groups
queue = plone.export.groups
queue-auto-declare = True
queue-auto-delete = False
keys =
    name
    members

[plone.export.content.send_rfc822]
blueprint = rabbitpy.producer
routing-key = plone.export.content.rfc822
queue = plone.export.content.rfc822
queue-auto-declare = True
queue-auto-delete = False
key = _rfc822

[plone.export.content.send_state]
blueprint = rabbitpy.producer
routing-key = plone.export.content.state
queue = plone.export.content.state
queue-auto-declare = True
queue-auto-delete = False
serializer = pickle
keys =
    _path
    _type
    _properties
    _local_roles
    _block_inherit
    _workflow_history
    _workflow_policy_in
    _workflow_policy_below
    creation_date
    modification_date

[plone.import.content.get_rfc822]
blueprint = rabbitpy.consumer
routing-key = plone.export.content.rfc822
queue = plone.export.content.rfc822
queue-auto-declare = True
queue-auto-delete = False
ack = false

[plone.import.content.get_rfc822_params]
blueprint = transmogrifier.set
_path = python:item.get_param('path')
_type = python:item.get_param('type')
_uuid = python:item.get_param('uuid')

[plone.import.content.filter]
blueprint = transmogrifier.filter
condition = python:item['_type'] in [t.strip() for t in '${transmogrifier:content-types}'.split() if t.strip()]

[plone.import.content.fix_topic_to_collection]
blueprint = transmogrifier.set
condition = python:item['_type'] == 'Topic'
_type = Collection

[plone.import.content.fix_file_type]
blueprint = transmogrifier.transform
condition = python:item['_type'] == 'File'
expression = python:item.set_param('name', item.get('id', '').decode('utf-8'))

[plone.import.content.fix_link_type]
blueprint = transmogrifier.set
condition = python:item['_type'] == 'Link' and item.get_payload()
remoteUrl = python:[item.get_payload(), setattr(item, '_payload', None)][0]
# set payload to None, because dexterity Link doesn't have primary fields
# and demarshaller would not accept payload without a primary field

[plone.import.content.fix_dublincore]
blueprint = transmogrifier.set
subjects = python:item.get('subjects', item.get('subject', ''))
expires = python:item.get('expiration_date', item.get('expirationDate', ''))
effective = python:item.get('effective_date', item.get('effectiveDate', ''))
exclude_from_nav = python:item.get('exclude_from_nav', item.get('excludeFromNav', 'False'))
allow_discussion = python:item.get('allow_discussion', item.get('allowDiscussion', 'False'))
table_of_contents = python:item.get('table_of_contents', item.get('tableOfContents', 'False'))

[plone.import.content.fix_path]
blueprint = transmogrifier.codec
_path = unicode:utf-8

[plone.import.content.del_id]
blueprint = transmogrifier.del
keys = id

[plone.import.content.create_folders]
blueprint = plone.folders

[plone.import.content.create_object]
blueprint = plone.constructor

[plone.import.content.fix_portal_type]
blueprint = plone.portal_type

[plone.import.content.set_uuid]
blueprint = plone.uuid.set

[plone.import.content.set_rfc822]
blueprint = plone.rfc822.demarshall

[plone.import.content.reindex_object]
blueprint = plone.reindex_object

[plone.import.commit]
blueprint = transmogrifier.interval
modules = transaction
expression = python:modules['transaction'].commit()

[plone.import.content.get_state]
blueprint = rabbitpy.producer
routing-key = plone.export.content.state
queue = plone.export.content.state
queue-auto-declare = True
queue-auto-delete = False

[plone.import.content.set_dates]
blueprint = plone.dates.set

[plone.import.content.set_properties]
blueprint = plone.properties.set

[plone.import.content.set_workflow_history]
blueprint = plone.workflow_history.set

[plone.import.content.set_placeful_workflow]
blueprint = plone.placeful_workflow.set

[plone.import.content.set_local_roles]
blueprint = plone.local_roles.set
