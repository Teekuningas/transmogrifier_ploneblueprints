# Usage:  bin/instance -OPlone run bin/transmogrify plone.export.content --context=zope.component.hooks.getSite transmogrifier:prefix=/Plone/subsite
[transmogrifier]
title = RFC822 Content Export
description = Exports archetype and dexterity content via RFC822 marshall
pipeline =
    plone.export.content.search
    plone.export.content.get_path
    plone.export.content.filter
    plone.export.content.behead
    plone.export.content.get_type
    plone.export.content.get_object
    plone.export.content.marshall
    plone.export.content.cleanup
    plone.export.content.invert
    plone.export.content.produce
prefix =

[plone.export.content.search]
blueprint = transmogrifier.from_expression
condition = path:item/_brain/_unrestrictedGetObject|nothing
_brain = path:context/portal_catalog/unrestrictedSearchResults

[plone.export.content.get_path]
blueprint = transmogrifier.set
_path = path:item/_brain/getPath

[plone.export.content.filter]
blueprint = transmogrifier.filter
condition = python:item.get('_path').startswith('${transmogrifier:prefix}/')

[plone.export.content.behead]
blueprint = transmogrifier.set
_path = python:item.get('_path')[len('${transmogrifier:prefix}'):]

[plone.export.content.get_type]
blueprint = transmogrifier.set
_type = path:item/_brain/portal_type

[plone.export.content.get_object]
blueprint = transmogrifier.set
_object = path:item/_brain/_unrestrictedGetObject

[plone.export.content.marshall]
blueprint = plone.rfc822.marshall
key = message

[plone.export.content.invert]
blueprint = transmogrifier.invert
key = message

[plone.export.content.cleanup]
blueprint = transmogrifier.del
keys = 
    _object
    _brain

[plone.export.content.produce]
blueprint = rabbitpy.producer
routing_key = plone.export.content
queue = plone.export.content
queue_auto_declare = True
queue_auto_delete = False

[plone.export.content.logger]
blueprint = transmogrifier.logger
name = plone.export.content
level = ERROR

[plone.export.content.breakpoint]
blueprint = transmogrifier.breakpoint
