[transmogrifier]
pipeline =
    brains
    objects
    type
    path
    filter_sport
    behead_sport
    rfc822
    clean
    invert
    producer
#   logger

[brains]
blueprint = transmogrifier.from_expression
_brain = python:context.portal_catalog.unrestrictedSearchResults()

[objects]
blueprint = transmogrifier.set
_object = python:item['_brain']._unrestrictedGetObject()

[type]
blueprint = transmogrifier.set
_type = python:item['_object'].getPortalTypeName()

[path]
blueprint = transmogrifier.set
_path = python:'/'.join(item['_object'].getPhysicalPath())

[filter_sport]
blueprint = transmogrifier.filter
condition = python:item.get('_path').startswith('/jyu/sport/')

[behead_sport]
blueprint = transmogrifier.set
_path = python:item.get('_path')[len('/jyu/sport'):]

[rfc822]
blueprint = plone.rfc822.export
key = message

[clean]
blueprint = transmogrifier.del
keys = 
    _object
    _brain

[invert]
blueprint = transmogrifier.invert
key = message

[producer]
blueprint = rabbitpy.producer

[breakpoint]
blueprint = transmogrifier.breakpoint

[logger]
blueprint = transmogrifier.logger
name = logger
level = ERROR
