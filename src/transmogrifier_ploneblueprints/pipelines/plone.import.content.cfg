# Usage:  bin/instance -OPlone run bin/transmogrify plone.import.content --context=zope.component.hooks.getSite
[transmogrifier]
title = RFC822 Content Import (JYU)
description = Imports archetype and dexterity content via RFC822 marshall
pipeline =
    plone.import.content.consume
    plone.import.content.codec
    plone.import.content.filter

    plone.import.content.fix_link_type
    plone.import.content.fix_file_type
    plone.import.content.fix_dublincore

    plone.import.content.cleanup
    plone.import.content.folders
    plone.import.content.constructor

    plone.import.content.fix_portal_type
    plone.import.content.set_uuid

    plone.import.content.demarshall
    plone.import.content.reindex
    plone.import.content.commit
content-types =
    Document
    Event
    File
    Folder
    Image
    Link
    News Item
#   Topic

[plone.import.content.consume]
blueprint = rabbitpy.consumer
routing-key = plone.export.content
queue = plone.export.content
queue-auto-declare = True
queue-auto-delete = False
ack = false

[plone.import.content.codec]
blueprint = transmogrifier.codec
_path = unicode:utf-8

[plone.import.content.filter]
blueprint = transmogrifier.filter
condition = python:item['_type'] in [t.strip() for t in options.get('content-types').split() if t.strip()]
content-types = ${transmogrifier:content-types}

[plone.import.content.fix_file_type]
blueprint = transmogrifier.transform
condition = python:item['_type'] == 'File'
expression = python:item.set_param('name', item.get('id', '').decode('utf-8'))

[plone.import.content.fix_link_type]
blueprint = transmogrifier.set
condition = python:item['_type'] == 'Link' and item.get_payload()
remoteUrl = python:[item.get_payload(), setattr(item, '_payload', None)][0]
# set payload to None, because dexterity Link doesn't have primary fields
# and demarshaller would not accept payload without a primary field

[plone.import.content.fix_dublincore]
blueprint = transmogrifier.set
subjects = python:item.get('subjects', item.get('subject', ''))
expires = python:item.get('expiration_date', item.get('expirationDate', ''))
effective = python:item.get('effective_date', item.get('effectiveDate', ''))
exclude_from_nav = python:item.get('exclude_from_nav', item.get('excludeFromNav', 'False'))
allow_discussion = python:item.get('allow_discussion', item.get('allowDiscussion', 'False'))
table_of_contents = python:item.get('table_of_contents', item.get('tableOfContents', 'False'))

[plone.import.content.cleanup]
blueprint = transmogrifier.del
keys =
    id

[plone.import.content.folders]
blueprint = plone.folders

[plone.import.content.constructor]
blueprint = plone.constructor

[plone.import.content.fix_portal_type]
blueprint = plone.portal_type

[plone.import.content.set_uuid]
blueprint = plone.set_uuid

[plone.import.content.demarshall]
blueprint = plone.rfc822.demarshall

[plone.import.content.reindex]
blueprint = plone.reindex_object

[plone.import.content.commit]
blueprint = transmogrifier.interval
modules = transaction
expression = python:modules['transaction'].commit()

[plone.import.content.breakpoint]
blueprint = transmogrifier.breakpoint

[plone.import.content.logger]
blueprint = transmogrifier.logger
name = plone.import.content
level = WARNING
